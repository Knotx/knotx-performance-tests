routingOperations = ${routingOperations} [
  {
    operationId = example-api-with-handlers-operation
    handlers = [
      {
        name = example-api
        config {
          body {
            status = success
            message = "Hello from Knot.x!"
          }
        }
      }
    ]
  }
  {
    operationId = example-api-with-fragments-operation
    handlers = ${config.server.handlers.common.request} [
      {
        name = singleFragmentSupplier
        config = {
          type = json
          configuration {
            data-knotx-task = api-task
          }
        }
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/api-with-fragments.conf"))}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }
  {
    operationId = healthcheck-operation
    handlers = [
      {
        name = healthcheck
      }
    ]
  }

  {
    operationId = scenario0
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario0.conf"))}
        config.actions.user.config.endpointOptions.domain = ${mocks.domain}
        config.actions.creditCard.config.endpointOptions.domain = ${mocks.domain}
        config.actions.paypal.config.endpointOptions.domain = ${mocks.domain}
        config.actions.payU.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }

  {
    operationId = scenario1
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario1.conf"))}
        config.actions.monutains.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }

  {
    operationId = scenario2
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario2.conf"))}
        config.actions.mountains.config.endpointOptions.domain = ${mocks.domain}
        config.actions.continents.config.endpointOptions.domain = ${mocks.domain}
        config.actions.countries.config.endpointOptions.domain = ${mocks.domain}
        config.actions.names.config.endpointOptions.domain = ${mocks.domain}
        config.actions.dates.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }

  {
    operationId = scenario3
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario3.conf"))}
        config.actions.mountains.config.endpointOptions.domain = ${mocks.domain}
        config.actions.continents.config.endpointOptions.domain = ${mocks.domain}
        config.actions.countries.config.endpointOptions.domain = ${mocks.domain}
        config.actions.names.config.endpointOptions.domain = ${mocks.domain}
        config.actions.dates.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }

  {
    operationId = scenario4
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario4.conf"))}
        config.actions.first.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }

  {
    operationId = scenario5
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = {include required(classpath("routes/handlers/httpRepoConnectorHandler.conf"))}
        config.clientDestination.domain = ${mocks.domain}
      },
      {
        name = fragmentsProviderHtmlSplitter
      },
      {
        name = fragmentsHandler
        config = {include required(classpath("routes/handlers/scenario5.conf"))}
        config.actions.peoples.config.endpointOptions.domain = ${mocks.domain}
      },
      {
        name = fragmentsAssemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }
]